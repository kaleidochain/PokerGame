// Objective-C API for talking to github.com/kaleidochain/kaleido/mobile_gengine Go package.
//   gobind -lang=objc github.com/kaleidochain/kaleido/mobile_gengine
//
// File is generated by gobind. Do not edit.

#ifndef __Gengine_H__
#define __Gengine_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class GengineAccount;
@class GengineAccounts;
@class GengineAddress;
@class GengineAddresses;
@class GengineBigInt;
@class GengineBigInts;
@class GengineBlock;
@class GengineBloom;
@class GengineCallMsg;
@class GengineContext;
@class GengineEngineConfig;
@class GengineEnode;
@class GengineEnodes;
@class GengineFilterQuery;
@class GengineGengineClient;
@class GengineHash;
@class GengineHashes;
@class GengineHeader;
@class GengineHeaders;
@class GengineKeyStore;
@class GengineLog;
@class GengineLogs;
@class GengineMnemonicInfo;
@class GengineNode;
@class GengineNodeConfig;
@class GengineNonce;
@class GengineReceipt;
@class GengineSubscription;
@class GengineSyncProgress;
@class GengineTopics;
@class GengineTransaction;
@class GengineTransactions;
@protocol GengineFilterLogsHandler;
@class GengineFilterLogsHandler;
@protocol GengineJavaCallback;
@class GengineJavaCallback;
@protocol GengineNewHeadHandler;
@class GengineNewHeadHandler;

@protocol GengineFilterLogsHandler <NSObject>
- (void)onError:(NSString* _Nullable)failure;
- (void)onFilterLogs:(GengineLog* _Nullable)log;
@end

@protocol GengineJavaCallback <NSObject>
- (void)onEvent:(NSString* _Nullable)p0;
@end

@protocol GengineNewHeadHandler <NSObject>
- (void)onError:(NSString* _Nullable)failure;
- (void)onNewHead:(GengineHeader* _Nullable)header;
@end

/**
 * Account represents a stored key.
 */
@interface GengineAccount : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetAddress retrieves the address associated with the account.
 */
- (GengineAddress* _Nullable)getAddress;
/**
 * GetURL retrieves the canonical URL of the account.
 */
- (NSString* _Nonnull)getURL;
@end

/**
 * Accounts represents a slice of accounts.
 */
@interface GengineAccounts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns the account at the given index from the slice.
 */
- (GengineAccount* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the account at the given index in the slice.
 */
- (BOOL)set:(long)index account:(GengineAccount* _Nullable)account error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of accounts in the slice.
 */
- (long)size;
@end

/**
 * Address represents the 20 byte address of an Ethereum account.
 */
@interface GengineAddress : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAddressFromBytes converts a slice of bytes to a hash value.
 */
- (nullable instancetype)initFromBytes:(NSData* _Nullable)binary;
/**
 * NewAddressFromHex converts a hex string to a address value.
 */
- (nullable instancetype)initFromHex:(NSString* _Nullable)hex;
/**
 * GetBytes retrieves the byte representation of the address.
 */
- (NSData* _Nullable)getBytes;
/**
 * GetHex retrieves the hex string representation of the address.
 */
- (NSString* _Nonnull)getHex;
/**
 * SetBytes sets the specified slice of bytes as the address value.
 */
- (BOOL)setBytes:(NSData* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * SetHex sets the specified hex string as the address value.
 */
- (BOOL)setHex:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Addresses represents a slice of addresses.
 */
@interface GengineAddresses : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAddresses creates a slice of uninitialized addresses.
 */
- (nullable instancetype)init:(long)size;
/**
 * NewAddressesEmpty creates an empty slice of Addresses values.
 */
- (nullable instancetype)initEmpty;
/**
 * Append adds a new address element to the end of the slice.
 */
- (void)append:(GengineAddress* _Nullable)address;
/**
 * Get returns the address at the given index from the slice.
 */
- (GengineAddress* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the address at the given index in the slice.
 */
- (BOOL)set:(long)index address:(GengineAddress* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of addresses in the slice.
 */
- (long)size;
@end

/**
 * A BigInt represents a signed multi-precision integer.
 */
@interface GengineBigInt : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewBigInt allocates and returns a new BigInt set to x.
 */
- (nullable instancetype)init:(int64_t)x;
/**
 * GetBytes returns the absolute value of x as a big-endian byte slice.
 */
- (NSData* _Nullable)getBytes;
/**
 * GetInt64 returns the int64 representation of x. If x cannot be represented in
an int64, the result is undefined.
 */
- (int64_t)getInt64;
/**
 * GetString returns the value of x as a formatted string in some number base.
 */
- (NSString* _Nonnull)getString:(long)base;
/**
 * SetBytes interprets buf as the bytes of a big-endian unsigned integer and sets
the big int to that value.
 */
- (void)setBytes:(NSData* _Nullable)buf;
/**
 * SetInt64 sets the big int to x.
 */
- (void)setInt64:(int64_t)x;
/**
 * SetString sets the big int to x.

The string prefix determines the actual conversion base. A prefix of "0x" or
"0X" selects base 16; the "0" prefix selects base 8, and a "0b" or "0B" prefix
selects base 2. Otherwise the selected base is 10.
 */
- (void)setString:(NSString* _Nullable)x base:(long)base;
/**
 * Sign returns:

	-1 if x <  0
	 0 if x == 0
	+1 if x >  0
 */
- (long)sign;
/**
 * String returns the value of x as a formatted decimal string.
 */
- (NSString* _Nonnull)string;
@end

/**
 * BigInts represents a slice of big ints.
 */
@interface GengineBigInts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns the bigint at the given index from the slice.
 */
- (GengineBigInt* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the big int at the given index in the slice.
 */
- (BOOL)set:(long)index bigint:(GengineBigInt* _Nullable)bigint error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of big ints in the slice.
 */
- (long)size;
@end

/**
 * Block represents an entire block in the Ethereum blockchain.
 */
@interface GengineBlock : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewBlockFromJSON parses a block from a JSON data dump.
 */
- (nullable instancetype)initFromJSON:(NSString* _Nullable)data;
/**
 * NewBlockFromRLP parses a block from an RLP data dump.
 */
- (nullable instancetype)initFromRLP:(NSData* _Nullable)data;
/**
 * EncodeJSON encodes a block into a JSON data dump.
 */
- (NSString* _Nonnull)encodeJSON:(NSError* _Nullable* _Nullable)error;
/**
 * EncodeRLP encodes a block into an RLP data dump.
 */
- (NSData* _Nullable)encodeRLP:(NSError* _Nullable* _Nullable)error;
- (GengineBloom* _Nullable)getBloom;
- (GengineAddress* _Nullable)getCoinbase;
- (GengineBigInt* _Nullable)getDifficulty;
- (NSData* _Nullable)getExtra;
- (int64_t)getGasLimit;
- (int64_t)getGasUsed;
- (GengineHash* _Nullable)getHash;
- (GengineHeader* _Nullable)getHeader;
- (GengineHash* _Nullable)getMixDigest;
- (int64_t)getNonce;
- (int64_t)getNumber;
- (GengineHash* _Nullable)getParentHash;
- (GengineHash* _Nullable)getReceiptHash;
- (GengineHash* _Nullable)getRoot;
- (int64_t)getTime;
- (GengineTransaction* _Nullable)getTransaction:(GengineHash* _Nullable)hash;
- (GengineTransactions* _Nullable)getTransactions;
- (GengineHash* _Nullable)getTxHash;
- (GengineHash* _Nullable)getUncleHash;
- (GengineHeaders* _Nullable)getUncles;
@end

/**
 * Bloom represents a 256 bit bloom filter.
 */
@interface GengineBloom : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetBytes retrieves the byte representation of the bloom filter.
 */
- (NSData* _Nullable)getBytes;
/**
 * GetHex retrieves the hex string representation of the bloom filter.
 */
- (NSString* _Nonnull)getHex;
@end

/**
 * CallMsg contains parameters for contract calls.
 */
@interface GengineCallMsg : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewCallMsg creates an empty contract call parameter list.
 */
- (nullable instancetype)init;
- (NSData* _Nullable)getData;
- (GengineAddress* _Nullable)getFrom;
- (int64_t)getGas;
- (GengineBigInt* _Nullable)getGasPrice;
- (GengineAddress* _Nullable)getTo;
- (GengineBigInt* _Nullable)getValue;
- (void)setData:(NSData* _Nullable)data;
- (void)setFrom:(GengineAddress* _Nullable)address;
- (void)setGas:(int64_t)gas;
- (void)setGasPrice:(GengineBigInt* _Nullable)price;
- (void)setTo:(GengineAddress* _Nullable)address;
- (void)setValue:(GengineBigInt* _Nullable)value;
@end

/**
 * Context carries a deadline, a cancelation signal, and other values across API
boundaries.
 */
@interface GengineContext : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewContext returns a non-nil, empty Context. It is never canceled, has no
values, and has no deadline. It is typically used by the main function,
initialization, and tests, and as the top-level Context for incoming requests.
 */
- (nullable instancetype)init;
/**
 * WithCancel returns a copy of the original context with cancellation mechanism
included.

Canceling this context releases resources associated with it, so code should
call cancel as soon as the operations running in this Context complete.
 */
- (GengineContext* _Nullable)withCancel;
/**
 * WithDeadline returns a copy of the original context with the deadline adjusted
to be no later than the specified time.

Canceling this context releases resources associated with it, so code should
call cancel as soon as the operations running in this Context complete.
 */
- (GengineContext* _Nullable)withDeadline:(int64_t)sec nsec:(int64_t)nsec;
/**
 * WithTimeout returns a copy of the original context with the deadline adjusted
to be no later than now + the duration specified.

Canceling this context releases resources associated with it, so code should
call cancel as soon as the operations running in this Context complete.
 */
- (GengineContext* _Nullable)withTimeout:(int64_t)nsec;
@end

/**
 * EngineConfig represents the collection of configuration values to fine tune the Geth
node embedded into a mobile process. The available values are a subset of the
entire API provided by go-ethereum to reduce the maintenance surface and dev
complexity.
 */
@interface GengineEngineConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewEngineConfig creates a new node option set, initialized to the default values.
 */
- (nullable instancetype)init;
/**
 * FullNode host interface for the websocket RPC server
 */
@property (nonatomic) NSString* _Nonnull fullNodeWsHost;
/**
 * FullNode TCP port for the websocket RPC server
 */
@property (nonatomic) long fullNodeWsPort;
/**
 * Use Account Address
 */
@property (nonatomic) NSString* _Nonnull useAccountAddr;
/**
 * Use Account Password
 */
@property (nonatomic) NSString* _Nonnull useAccountPassword;
/**
 * Game Full NodeID list
 */
@property (nonatomic) GengineEnodes* _Nullable gameNodes;
@end

/**
 * Enode represents a host on the network.
 */
@interface GengineEnode : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewEnode parses a node designator.

There are two basic forms of node designators
  - incomplete nodes, which only have the public key (node ID)
  - complete nodes, which contain the public key and IP/Port information

For incomplete nodes, the designator must look like one of these

   enode://<hex node id>
   <hex node id>

For complete nodes, the node ID is encoded in the username portion
of the URL, separated from the host by an @ sign. The hostname can
only be given as an IP address, DNS domain names are not allowed.
The port in the host name section is the TCP listening port. If the
TCP and UDP (discovery) ports differ, the UDP port is specified as
query parameter "discport".

In the following example, the node URL describes
a node with IP address 10.3.58.6, TCP listening port 30303
and UDP discovery port 30301.

   enode://<hex node id>@10.3.58.6:30303?discport=30301
 */
- (nullable instancetype)init:(NSString* _Nullable)rawurl;
@end

/**
 * Enodes represents a slice of accounts.
 */
@interface GengineEnodes : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewEnodes creates a slice of uninitialized enodes.
 */
- (nullable instancetype)init:(long)size;
/**
 * NewEnodesEmpty creates an empty slice of Enode values.
 */
- (nullable instancetype)initEmpty;
/**
 * Append adds a new enode element to the end of the slice.
 */
- (void)append:(GengineEnode* _Nullable)enode;
/**
 * Get returns the enode at the given index from the slice.
 */
- (GengineEnode* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the enode at the given index in the slice.
 */
- (BOOL)set:(long)index enode:(GengineEnode* _Nullable)enode error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of enodes in the slice.
 */
- (long)size;
@end

/**
 * FilterQuery contains options for contract log filtering.
 */
@interface GengineFilterQuery : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewFilterQuery creates an empty filter query for contract log filtering.
 */
- (nullable instancetype)init;
- (GengineAddresses* _Nullable)getAddresses;
- (GengineBigInt* _Nullable)getFromBlock;
- (GengineBigInt* _Nullable)getToBlock;
- (GengineTopics* _Nullable)getTopics;
- (void)setAddresses:(GengineAddresses* _Nullable)addresses;
- (void)setFromBlock:(GengineBigInt* _Nullable)fromBlock;
- (void)setToBlock:(GengineBigInt* _Nullable)toBlock;
- (void)setTopics:(GengineTopics* _Nullable)topics;
@end

/**
 * GengineClient provides access to the Ethereum APIs.
 */
@interface GengineGengineClient : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * CallContract executes a message call transaction, which is directly executed in the VM
of the node, but never mined into the blockchain.

blockNumber selects the block height at which the call runs. It can be <0, in which
case the code is taken from the latest known block. Note that state from very old
blocks might not be available.
 */
- (NSData* _Nullable)callContract:(GengineContext* _Nullable)ctx msg:(GengineCallMsg* _Nullable)msg number:(int64_t)number error:(NSError* _Nullable* _Nullable)error;
/**
 * EstimateGas tries to estimate the gas needed to execute a specific transaction based on
the current pending state of the backend blockchain. There is no guarantee that this is
the true gas limit requirement as other transactions may be added or removed by miners,
but it should provide a basis for setting a reasonable default.
 */
- (BOOL)estimateGas:(GengineContext* _Nullable)ctx msg:(GengineCallMsg* _Nullable)msg gas:(int64_t* _Nullable)gas error:(NSError* _Nullable* _Nullable)error;
/**
 * FilterLogs executes a filter query.
 */
- (GengineLogs* _Nullable)filterLogs:(GengineContext* _Nullable)ctx query:(GengineFilterQuery* _Nullable)query error:(NSError* _Nullable* _Nullable)error;
- (NSData* _Nullable)gameCall:(NSString* _Nullable)jsonStr;
- (NSData* _Nullable)gameJavaSubscribe:(NSString* _Nullable)jsonStr jc:(id<GengineJavaCallback> _Nullable)jc;
- (NSData* _Nullable)gameSubscribe:(NSString* _Nullable)jsonStr f:(int64_t)f;
/**
 * GetBalanceAt returns the wei balance of the given account.
The block number can be <0, in which case the balance is taken from the latest known block.
 */
- (GengineBigInt* _Nullable)getBalanceAt:(GengineContext* _Nullable)ctx account:(GengineAddress* _Nullable)account number:(int64_t)number error:(NSError* _Nullable* _Nullable)error;
/**
 * GetBlockByHash returns the given full block.
 */
- (GengineBlock* _Nullable)getBlockByHash:(GengineContext* _Nullable)ctx hash:(GengineHash* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * GetBlockByNumber returns a block from the current canonical chain. If number is <0, the
latest known block is returned.
 */
- (GengineBlock* _Nullable)getBlockByNumber:(GengineContext* _Nullable)ctx number:(int64_t)number error:(NSError* _Nullable* _Nullable)error;
/**
 * GetCodeAt returns the contract code of the given account.
The block number can be <0, in which case the code is taken from the latest known block.
 */
- (NSData* _Nullable)getCodeAt:(GengineContext* _Nullable)ctx account:(GengineAddress* _Nullable)account number:(int64_t)number error:(NSError* _Nullable* _Nullable)error;
/**
 * GetHeaderByHash returns the block header with the given hash.
 */
- (GengineHeader* _Nullable)getHeaderByHash:(GengineContext* _Nullable)ctx hash:(GengineHash* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * GetHeaderByNumber returns a block header from the current canonical chain. If number is <0,
the latest known header is returned.
 */
- (GengineHeader* _Nullable)getHeaderByNumber:(GengineContext* _Nullable)ctx number:(int64_t)number error:(NSError* _Nullable* _Nullable)error;
/**
 * GetNonceAt returns the account nonce of the given account.
The block number can be <0, in which case the nonce is taken from the latest known block.
 */
- (BOOL)getNonceAt:(GengineContext* _Nullable)ctx account:(GengineAddress* _Nullable)account number:(int64_t)number nonce:(int64_t* _Nullable)nonce error:(NSError* _Nullable* _Nullable)error;
/**
 * GetPendingBalanceAt returns the wei balance of the given account in the pending state.
 */
- (GengineBigInt* _Nullable)getPendingBalanceAt:(GengineContext* _Nullable)ctx account:(GengineAddress* _Nullable)account error:(NSError* _Nullable* _Nullable)error;
/**
 * GetPendingCodeAt returns the contract code of the given account in the pending state.
 */
- (NSData* _Nullable)getPendingCodeAt:(GengineContext* _Nullable)ctx account:(GengineAddress* _Nullable)account error:(NSError* _Nullable* _Nullable)error;
/**
 * GetPendingNonceAt returns the account nonce of the given account in the pending state.
This is the nonce that should be used for the next transaction.
 */
- (BOOL)getPendingNonceAt:(GengineContext* _Nullable)ctx account:(GengineAddress* _Nullable)account nonce:(int64_t* _Nullable)nonce error:(NSError* _Nullable* _Nullable)error;
/**
 * GetPendingStorageAt returns the value of key in the contract storage of the given account in the pending state.
 */
- (NSData* _Nullable)getPendingStorageAt:(GengineContext* _Nullable)ctx account:(GengineAddress* _Nullable)account key:(GengineHash* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
/**
 * GetPendingTransactionCount returns the total number of transactions in the pending state.
 */
- (BOOL)getPendingTransactionCount:(GengineContext* _Nullable)ctx count:(long* _Nullable)count error:(NSError* _Nullable* _Nullable)error;
/**
 * GetStorageAt returns the value of key in the contract storage of the given account.
The block number can be <0, in which case the value is taken from the latest known block.
 */
- (NSData* _Nullable)getStorageAt:(GengineContext* _Nullable)ctx account:(GengineAddress* _Nullable)account key:(GengineHash* _Nullable)key number:(int64_t)number error:(NSError* _Nullable* _Nullable)error;
/**
 * GetTransactionByHash returns the transaction with the given hash.
 */
- (GengineTransaction* _Nullable)getTransactionByHash:(GengineContext* _Nullable)ctx hash:(GengineHash* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * GetTransactionCount returns the total number of transactions in the given block.
 */
- (BOOL)getTransactionCount:(GengineContext* _Nullable)ctx hash:(GengineHash* _Nullable)hash count:(long* _Nullable)count error:(NSError* _Nullable* _Nullable)error;
/**
 * GetTransactionInBlock returns a single transaction at index in the given block.
 */
- (GengineTransaction* _Nullable)getTransactionInBlock:(GengineContext* _Nullable)ctx hash:(GengineHash* _Nullable)hash index:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * GetTransactionReceipt returns the receipt of a transaction by transaction hash.
Note that the receipt is not available for pending transactions.
 */
- (GengineReceipt* _Nullable)getTransactionReceipt:(GengineContext* _Nullable)ctx hash:(GengineHash* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * GetTransactionSender returns the sender address of a transaction. The transaction must
be included in blockchain at the given block and index.
 */
- (GengineAddress* _Nullable)getTransactionSender:(GengineContext* _Nullable)ctx tx:(GengineTransaction* _Nullable)tx blockhash:(GengineHash* _Nullable)blockhash index:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * PendingCallContract executes a message call transaction using the EVM.
The state seen by the contract call is the pending state.
 */
- (NSData* _Nullable)pendingCallContract:(GengineContext* _Nullable)ctx msg:(GengineCallMsg* _Nullable)msg error:(NSError* _Nullable* _Nullable)error;
/**
 * SendTransaction injects a signed transaction into the pending pool for execution.

If the transaction was a contract creation use the TransactionReceipt method to get the
contract address after the transaction has been mined.
 */
- (BOOL)sendTransaction:(GengineContext* _Nullable)ctx tx:(GengineTransaction* _Nullable)tx error:(NSError* _Nullable* _Nullable)error;
/**
 * SubscribeFilterLogs subscribes to the results of a streaming filter query.
 */
- (GengineSubscription* _Nullable)subscribeFilterLogs:(GengineContext* _Nullable)ctx query:(GengineFilterQuery* _Nullable)query handler:(id<GengineFilterLogsHandler> _Nullable)handler buffer:(long)buffer error:(NSError* _Nullable* _Nullable)error;
/**
 * SubscribeNewHead subscribes to notifications about the current blockchain head
on the given channel.
 */
- (GengineSubscription* _Nullable)subscribeNewHead:(GengineContext* _Nullable)ctx handler:(id<GengineNewHeadHandler> _Nullable)handler buffer:(long)buffer error:(NSError* _Nullable* _Nullable)error;
/**
 * SuggestGasPrice retrieves the currently suggested gas price to allow a timely
execution of a transaction.
 */
- (GengineBigInt* _Nullable)suggestGasPrice:(GengineContext* _Nullable)ctx error:(NSError* _Nullable* _Nullable)error;
/**
 * SyncProgress retrieves the current progress of the sync algorithm. If there's
no sync currently running, it returns nil.
 */
- (GengineSyncProgress* _Nullable)syncProgress:(GengineContext* _Nullable)ctx error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Hash represents the 32 byte Keccak256 hash of arbitrary data.
 */
@interface GengineHash : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewHashFromBytes converts a slice of bytes to a hash value.
 */
- (nullable instancetype)initFromBytes:(NSData* _Nullable)binary;
/**
 * NewHashFromHex converts a hex string to a hash value.
 */
- (nullable instancetype)initFromHex:(NSString* _Nullable)hex;
/**
 * GetBytes retrieves the byte representation of the hash.
 */
- (NSData* _Nullable)getBytes;
/**
 * GetHex retrieves the hex string representation of the hash.
 */
- (NSString* _Nonnull)getHex;
/**
 * SetBytes sets the specified slice of bytes as the hash value.
 */
- (BOOL)setBytes:(NSData* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * SetHex sets the specified hex string as the hash value.
 */
- (BOOL)setHex:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Hashes represents a slice of hashes.
 */
@interface GengineHashes : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewHashes creates a slice of uninitialized Hashes.
 */
- (nullable instancetype)init:(long)size;
/**
 * NewHashesEmpty creates an empty slice of Hashes values.
 */
- (nullable instancetype)initEmpty;
/**
 * Append adds a new Hash element to the end of the slice.
 */
- (void)append:(GengineHash* _Nullable)hash;
/**
 * Get returns the hash at the given index from the slice.
 */
- (GengineHash* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the Hash at the given index in the slice.
 */
- (BOOL)set:(long)index hash:(GengineHash* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of hashes in the slice.
 */
- (long)size;
@end

/**
 * Header represents a block header in the Ethereum blockchain.
 */
@interface GengineHeader : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewHeaderFromJSON parses a header from a JSON data dump.
 */
- (nullable instancetype)initFromJSON:(NSString* _Nullable)data;
/**
 * NewHeaderFromRLP parses a header from an RLP data dump.
 */
- (nullable instancetype)initFromRLP:(NSData* _Nullable)data;
/**
 * EncodeJSON encodes a header into a JSON data dump.
 */
- (NSString* _Nonnull)encodeJSON:(NSError* _Nullable* _Nullable)error;
/**
 * EncodeRLP encodes a header into an RLP data dump.
 */
- (NSData* _Nullable)encodeRLP:(NSError* _Nullable* _Nullable)error;
- (GengineBloom* _Nullable)getBloom;
- (GengineAddress* _Nullable)getCoinbase;
- (GengineBigInt* _Nullable)getDifficulty;
- (NSData* _Nullable)getExtra;
- (int64_t)getGasLimit;
- (int64_t)getGasUsed;
- (GengineHash* _Nullable)getHash;
- (GengineHash* _Nullable)getMixDigest;
- (GengineNonce* _Nullable)getNonce;
- (int64_t)getNumber;
- (GengineHash* _Nullable)getParentHash;
- (GengineHash* _Nullable)getReceiptHash;
- (GengineHash* _Nullable)getRoot;
- (int64_t)getTime;
- (GengineHash* _Nullable)getTxHash;
- (GengineHash* _Nullable)getUncleHash;
@end

/**
 * Headers represents a slice of headers.
 */
@interface GengineHeaders : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns the header at the given index from the slice.
 */
- (GengineHeader* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of headers in the slice.
 */
- (long)size;
@end

/**
 * KeyStore manages a key storage directory on disk.
 */
@interface GengineKeyStore : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewKeyStore creates a keystore for the given directory.
 */
- (nullable instancetype)init:(long)scryptN scryptP:(long)scryptP;
/**
 * CreateAccount generates a new key and stores it into the key directory,
encrypting it with the passphrase and return mnemonic to store externally.
 */
- (GengineMnemonicInfo* _Nullable)createAccount:(NSString* _Nullable)passphrase wordlistidx:(long)wordlistidx error:(NSError* _Nullable* _Nullable)error;
/**
 * DeleteAccount deletes the key matched by account if the passphrase is correct.
If a contains no filename, the address must match a unique key.
 */
- (BOOL)deleteAccount:(GengineAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * ExportKey exports as a JSON key, encrypted with newPassphrase.
 */
- (NSData* _Nullable)exportKey:(GengineAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase newPassphrase:(NSString* _Nullable)newPassphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * GetAccounts returns all key files present in the directory.
 */
- (GengineAccounts* _Nullable)getAccounts;
/**
 * HasAddress reports whether a key with the given address is present.
 */
- (BOOL)hasAddress:(GengineAddress* _Nullable)address;
/**
 * ImportAccount recoveries a key by mnemonic and stores it into the key
directory, encrypting it with the passphrase and return pubkey
 */
- (NSString* _Nonnull)importAccount:(NSString* _Nullable)mnemonic passphrase:(NSString* _Nullable)passphrase wordlistidx:(long)wordlistidx error:(NSError* _Nullable* _Nullable)error;
/**
 * ImportECDSAKey stores the given encrypted JSON key into the key directory.
 */
- (GengineAccount* _Nullable)importECDSAKey:(NSData* _Nullable)key passphrase:(NSString* _Nullable)passphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * ImportKey stores the given encrypted JSON key into the key directory.
 */
- (GengineAccount* _Nullable)importKey:(NSData* _Nullable)keyJSON passphrase:(NSString* _Nullable)passphrase newPassphrase:(NSString* _Nullable)newPassphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * ImportPreSaleKey decrypts the given Ethereum presale wallet and stores
a key file in the key directory. The key file is encrypted with the same passphrase.
 */
- (GengineAccount* _Nullable)importPreSaleKey:(NSData* _Nullable)keyJSON passphrase:(NSString* _Nullable)passphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * Lock removes the private key with the given address from memory.
 */
- (BOOL)lock:(GengineAddress* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * NewAccount generates a new key and stores it into the key directory,
encrypting it with the passphrase.
 */
- (GengineAccount* _Nullable)newAccount:(NSString* _Nullable)passphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * SignHash calculates a ECDSA signature for the given hash. The produced signature
is in the [R || S || V] format where V is 0 or 1.
 */
- (NSData* _Nullable)signHash:(GengineAddress* _Nullable)address hash:(NSData* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * SignHashPassphrase signs hash if the private key matching the given address can
be decrypted with the given passphrase. The produced signature is in the
[R || S || V] format where V is 0 or 1.
 */
- (NSData* _Nullable)signHashPassphrase:(GengineAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase hash:(NSData* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * SignTx signs the given transaction with the requested account.
 */
- (GengineTransaction* _Nullable)signTx:(GengineAccount* _Nullable)account tx:(GengineTransaction* _Nullable)tx chainID:(GengineBigInt* _Nullable)chainID error:(NSError* _Nullable* _Nullable)error;
/**
 * SignTxPassphrase signs the transaction if the private key matching the
given address can be decrypted with the given passphrase.
 */
- (GengineTransaction* _Nullable)signTxPassphrase:(GengineAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase tx:(GengineTransaction* _Nullable)tx chainID:(GengineBigInt* _Nullable)chainID error:(NSError* _Nullable* _Nullable)error;
/**
 * TimedUnlock unlocks the given account with the passphrase. The account stays
unlocked for the duration of timeout (nanoseconds). A timeout of 0 unlocks the
account until the program exits. The account must match a unique key file.

If the account address is already unlocked for a duration, TimedUnlock extends or
shortens the active unlock timeout. If the address was previously unlocked
indefinitely the timeout is not altered.
 */
- (BOOL)timedUnlock:(GengineAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase timeout:(int64_t)timeout error:(NSError* _Nullable* _Nullable)error;
/**
 * Unlock unlocks the given account indefinitely.
 */
- (BOOL)unlock:(GengineAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * UpdateAccount changes the passphrase of an existing account.
 */
- (BOOL)updateAccount:(GengineAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase newPassphrase:(NSString* _Nullable)newPassphrase error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Log represents a contract log event. These events are generated by the LOG
opcode and stored/indexed by the node.
 */
@interface GengineLog : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (GengineAddress* _Nullable)getAddress;
- (GengineHash* _Nullable)getBlockHash;
- (int64_t)getBlockNumber;
- (NSData* _Nullable)getData;
- (long)getIndex;
- (GengineHashes* _Nullable)getTopics;
- (GengineHash* _Nullable)getTxHash;
- (long)getTxIndex;
@end

/**
 * Logs represents a slice of VM logs.
 */
@interface GengineLogs : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns the log at the given index from the slice.
 */
- (GengineLog* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of logs in the slice.
 */
- (long)size;
@end

/**
 * MnemonicInfo contains public key and mnemonic of an account.
 */
@interface GengineMnemonicInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull pubKey;
@property (nonatomic) NSString* _Nonnull mnemonic;
@end

/**
 * Node represents a Geth Ethereum node instance.
 */
@interface GengineNode : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewNode creates and configures a new Geth node.
 */
- (nullable instancetype)init:(GengineNodeConfig* _Nullable)config engineconfig:(GengineEngineConfig* _Nullable)engineconfig;
/**
 * GetGengineClient retrieves a client to access the Ethereum subsystem.
 */
- (GengineGengineClient* _Nullable)getGengineClient:(NSError* _Nullable* _Nullable)error;
/**
 * Start creates a live P2P node and starts running it.
 */
- (BOOL)start:(NSError* _Nullable* _Nullable)error;
/**
 * Stop terminates a running node along with all it's services. In the node was
not started, an error is returned.
 */
- (BOOL)stop:(NSError* _Nullable* _Nullable)error;
@end

/**
 * NodeConfig represents the collection of configuration values to fine tune the Geth
node embedded into a mobile process. The available values are a subset of the
entire API provided by go-ethereum to reduce the maintenance surface and dev
complexity.
 */
@interface GengineNodeConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewNodeConfig creates a new node option set, initialized to the default values.
 */
- (nullable instancetype)init;
/**
 * Bootstrap nodes used to establish connectivity with the rest of the network.
 */
@property (nonatomic) GengineEnodes* _Nullable bootstrapNodes;
/**
 * MaxPeers is the maximum number of peers that can be connected. If this is
set to zero, then only the configured static and trusted peers can connect.
 */
@property (nonatomic) long maxPeers;
/**
 * EthereumEnabled specifies whether the node should run the Ethereum protocol.
 */
@property (nonatomic) BOOL ethereumEnabled;
/**
 * EthereumNetworkID is the network identifier used by the Ethereum protocol to
decide if remote peers should be accepted or not.
 */
@property (nonatomic) int64_t ethereumNetworkID;
/**
 * EthereumGenesis is the genesis JSON to use to seed the blockchain with. An
empty genesis state is equivalent to using the mainnet's state.
 */
@property (nonatomic) NSString* _Nonnull ethereumGenesis;
/**
 * EthereumDatabaseCache is the system memory in MB to allocate for database caching.
A minimum of 16MB is always reserved.
 */
@property (nonatomic) long ethereumDatabaseCache;
/**
 * EthereumNetStats is a netstats connection string to use to report various
chain, transaction and node stats to a monitoring server.

It has the form "nodename:secret@host:port"
 */
@property (nonatomic) NSString* _Nonnull ethereumNetStats;
/**
 * WhisperEnabled specifies whether the node should run the Whisper protocol.
 */
@property (nonatomic) BOOL whisperEnabled;
@end

/**
 * A Nonce is a 64-bit hash which proves (combined with the mix-hash) that
a sufficient amount of computation has been carried out on a block.
 */
@interface GengineNonce : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetBytes retrieves the byte representation of the block nonce.
 */
- (NSData* _Nullable)getBytes;
/**
 * GetHex retrieves the hex string representation of the block nonce.
 */
- (NSString* _Nonnull)getHex;
@end

/**
 * Receipt represents the results of a transaction.
 */
@interface GengineReceipt : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewReceiptFromJSON parses a transaction receipt from a JSON data dump.
 */
- (nullable instancetype)initFromJSON:(NSString* _Nullable)data;
/**
 * NewReceiptFromRLP parses a transaction receipt from an RLP data dump.
 */
- (nullable instancetype)initFromRLP:(NSData* _Nullable)data;
/**
 * EncodeJSON encodes a transaction receipt into a JSON data dump.
 */
- (NSString* _Nonnull)encodeJSON:(NSError* _Nullable* _Nullable)error;
/**
 * EncodeRLP encodes a transaction receipt into an RLP data dump.
 */
- (NSData* _Nullable)encodeRLP:(NSError* _Nullable* _Nullable)error;
- (GengineBloom* _Nullable)getBloom;
- (GengineAddress* _Nullable)getContractAddress;
- (int64_t)getCumulativeGasUsed;
- (int64_t)getGasUsed;
- (GengineLogs* _Nullable)getLogs;
- (NSData* _Nullable)getPostState;
- (GengineHash* _Nullable)getTxHash;
@end

/**
 * Subscription represents an event subscription where events are
delivered on a data channel.
 */
@interface GengineSubscription : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Unsubscribe cancels the sending of events to the data channel
and closes the error channel.
 */
- (void)unsubscribe;
@end

/**
 * SyncProgress gives progress indications when the node is synchronising with
the Ethereum network.
 */
@interface GengineSyncProgress : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (int64_t)getCurrentBlock;
- (int64_t)getHighestBlock;
- (int64_t)getKnownStates;
- (int64_t)getPulledStates;
- (int64_t)getStartingBlock;
@end

/**
 * Topics is a set of topic lists to filter events with.
 */
@interface GengineTopics : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewTopics creates a slice of uninitialized Topics.
 */
- (nullable instancetype)init:(long)size;
/**
 * NewTopicsEmpty creates an empty slice of Topics values.
 */
- (nullable instancetype)initEmpty;
/**
 * Append adds a new topic list to the end of the slice.
 */
- (void)append:(GengineHashes* _Nullable)topics;
/**
 * Get returns the topic list at the given index from the slice.
 */
- (GengineHashes* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the topic list at the given index in the slice.
 */
- (BOOL)set:(long)index topics:(GengineHashes* _Nullable)topics error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of topic lists inside the set
 */
- (long)size;
@end

/**
 * Transaction represents a single Ethereum transaction.
 */
@interface GengineTransaction : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewTransaction creates a new transaction with the given properties.
 */
- (nullable instancetype)init:(int64_t)nonce to:(GengineAddress* _Nullable)to amount:(GengineBigInt* _Nullable)amount gasLimit:(int64_t)gasLimit gasPrice:(GengineBigInt* _Nullable)gasPrice data:(NSData* _Nullable)data;
/**
 * NewTransactionFromJSON parses a transaction from a JSON data dump.
 */
- (nullable instancetype)initFromJSON:(NSString* _Nullable)data;
/**
 * NewTransactionFromRLP parses a transaction from an RLP data dump.
 */
- (nullable instancetype)initFromRLP:(NSData* _Nullable)data;
/**
 * EncodeJSON encodes a transaction into a JSON data dump.
 */
- (NSString* _Nonnull)encodeJSON:(NSError* _Nullable* _Nullable)error;
/**
 * EncodeRLP encodes a transaction into an RLP data dump.
 */
- (NSData* _Nullable)encodeRLP:(NSError* _Nullable* _Nullable)error;
- (GengineBigInt* _Nullable)getCost;
- (NSData* _Nullable)getData;
/**
 * Deprecated: use EthereumClient.TransactionSender
 */
- (GengineAddress* _Nullable)getFrom:(GengineBigInt* _Nullable)chainID error:(NSError* _Nullable* _Nullable)error;
- (int64_t)getGas;
- (GengineBigInt* _Nullable)getGasPrice;
- (GengineHash* _Nullable)getHash;
- (int64_t)getNonce;
/**
 * Deprecated: GetSigHash cannot know which signer to use.
 */
- (GengineHash* _Nullable)getSigHash;
- (GengineAddress* _Nullable)getTo;
- (GengineBigInt* _Nullable)getValue;
- (GengineTransaction* _Nullable)withSignature:(NSData* _Nullable)sig chainID:(GengineBigInt* _Nullable)chainID error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Transactions represents a slice of transactions.
 */
@interface GengineTransactions : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns the transaction at the given index from the slice.
 */
- (GengineTransaction* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of transactions in the slice.
 */
- (long)size;
@end

/**
 * ChineseSimplified is the index of bip39/wordlists/chinese_simplified
 */
FOUNDATION_EXPORT const int64_t GengineChineseSimplified;
/**
 * ChineseTraditional is the index of bip39/wordlists/chinese_traditional
 */
FOUNDATION_EXPORT const int64_t GengineChineseTraditional;
/**
 * English is the index of bip39/wordlists/english
 */
FOUNDATION_EXPORT const int64_t GengineEnglish;
/**
 * French is the index of bip39/wordlists/french
 */
FOUNDATION_EXPORT const int64_t GengineFrench;
/**
 * Italian is the index of bip39/wordlists/italian
 */
FOUNDATION_EXPORT const int64_t GengineItalian;
/**
 * Japanese is the index of bip39/wordlists/japanese
 */
FOUNDATION_EXPORT const int64_t GengineJapanese;
/**
 * Korean is the index of bip39/wordlists/korean
 */
FOUNDATION_EXPORT const int64_t GengineKorean;
/**
 * LightScryptN is the N parameter of Scrypt encryption algorithm, using 4MB
memory and taking approximately 100ms CPU time on a modern processor.
 */
FOUNDATION_EXPORT const long GengineLightScryptN;
/**
 * LightScryptP is the P parameter of Scrypt encryption algorithm, using 4MB
memory and taking approximately 100ms CPU time on a modern processor.
 */
FOUNDATION_EXPORT const long GengineLightScryptP;
/**
 * Spanish is the index of bip39/wordlists/spanish
 */
FOUNDATION_EXPORT const int64_t GengineSpanish;
/**
 * StandardScryptN is the N parameter of Scrypt encryption algorithm, using 256MB
memory and taking approximately 1s CPU time on a modern processor.
 */
FOUNDATION_EXPORT const long GengineStandardScryptN;
/**
 * StandardScryptP is the P parameter of Scrypt encryption algorithm, using 256MB
memory and taking approximately 1s CPU time on a modern processor.
 */
FOUNDATION_EXPORT const long GengineStandardScryptP;

/**
 * ClearCache delete files and directories except the file list
and the directory list which is split by ","
 */
FOUNDATION_EXPORT BOOL GengineClearCache(NSString* _Nullable excludeDir, NSString* _Nullable excludeFile, NSError* _Nullable* _Nullable error);

/**
 * Debug log a message at the debug level with string
 */
FOUNDATION_EXPORT void GengineDebug(NSString* _Nullable msg);

/**
 * Error log a message at the error level with string
 */
FOUNDATION_EXPORT void GengineError(NSString* _Nullable msg);

/**
 * Info log a message at the info level with string
 */
FOUNDATION_EXPORT void GengineInfo(NSString* _Nullable msg);

/**
 * KaleidoTestnetBootnodes returns the enode URLs of the P2P bootstrap nodes operated
by the foundation running the discovery protocol.
 */
FOUNDATION_EXPORT GengineEnodes* _Nullable GengineKaleidoTestnetBootnodes(void);

/**
 * NewAddressFromBytes converts a slice of bytes to a hash value.
 */
FOUNDATION_EXPORT GengineAddress* _Nullable GengineNewAddressFromBytes(NSData* _Nullable binary, NSError* _Nullable* _Nullable error);

/**
 * NewAddressFromHex converts a hex string to a address value.
 */
FOUNDATION_EXPORT GengineAddress* _Nullable GengineNewAddressFromHex(NSString* _Nullable hex, NSError* _Nullable* _Nullable error);

/**
 * NewAddresses creates a slice of uninitialized addresses.
 */
FOUNDATION_EXPORT GengineAddresses* _Nullable GengineNewAddresses(long size);

/**
 * NewAddressesEmpty creates an empty slice of Addresses values.
 */
FOUNDATION_EXPORT GengineAddresses* _Nullable GengineNewAddressesEmpty(void);

/**
 * NewBigInt allocates and returns a new BigInt set to x.
 */
FOUNDATION_EXPORT GengineBigInt* _Nullable GengineNewBigInt(int64_t x);

/**
 * NewBlockFromJSON parses a block from a JSON data dump.
 */
FOUNDATION_EXPORT GengineBlock* _Nullable GengineNewBlockFromJSON(NSString* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewBlockFromRLP parses a block from an RLP data dump.
 */
FOUNDATION_EXPORT GengineBlock* _Nullable GengineNewBlockFromRLP(NSData* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewCallMsg creates an empty contract call parameter list.
 */
FOUNDATION_EXPORT GengineCallMsg* _Nullable GengineNewCallMsg(void);

/**
 * NewContext returns a non-nil, empty Context. It is never canceled, has no
values, and has no deadline. It is typically used by the main function,
initialization, and tests, and as the top-level Context for incoming requests.
 */
FOUNDATION_EXPORT GengineContext* _Nullable GengineNewContext(void);

/**
 * NewEngineConfig creates a new node option set, initialized to the default values.
 */
FOUNDATION_EXPORT GengineEngineConfig* _Nullable GengineNewEngineConfig(void);

/**
 * NewEnode parses a node designator.

There are two basic forms of node designators
  - incomplete nodes, which only have the public key (node ID)
  - complete nodes, which contain the public key and IP/Port information

For incomplete nodes, the designator must look like one of these

   enode://<hex node id>
   <hex node id>

For complete nodes, the node ID is encoded in the username portion
of the URL, separated from the host by an @ sign. The hostname can
only be given as an IP address, DNS domain names are not allowed.
The port in the host name section is the TCP listening port. If the
TCP and UDP (discovery) ports differ, the UDP port is specified as
query parameter "discport".

In the following example, the node URL describes
a node with IP address 10.3.58.6, TCP listening port 30303
and UDP discovery port 30301.

   enode://<hex node id>@10.3.58.6:30303?discport=30301
 */
FOUNDATION_EXPORT GengineEnode* _Nullable GengineNewEnode(NSString* _Nullable rawurl, NSError* _Nullable* _Nullable error);

/**
 * NewEnodes creates a slice of uninitialized enodes.
 */
FOUNDATION_EXPORT GengineEnodes* _Nullable GengineNewEnodes(long size);

/**
 * NewEnodesEmpty creates an empty slice of Enode values.
 */
FOUNDATION_EXPORT GengineEnodes* _Nullable GengineNewEnodesEmpty(void);

/**
 * NewEthereumClient connects a client to the given URL.
 */
FOUNDATION_EXPORT GengineGengineClient* _Nullable GengineNewEthereumClient(NSString* _Nullable rawurl, NSError* _Nullable* _Nullable error);

/**
 * NewFilterQuery creates an empty filter query for contract log filtering.
 */
FOUNDATION_EXPORT GengineFilterQuery* _Nullable GengineNewFilterQuery(void);

/**
 * NewHashFromBytes converts a slice of bytes to a hash value.
 */
FOUNDATION_EXPORT GengineHash* _Nullable GengineNewHashFromBytes(NSData* _Nullable binary, NSError* _Nullable* _Nullable error);

/**
 * NewHashFromHex converts a hex string to a hash value.
 */
FOUNDATION_EXPORT GengineHash* _Nullable GengineNewHashFromHex(NSString* _Nullable hex, NSError* _Nullable* _Nullable error);

/**
 * NewHashes creates a slice of uninitialized Hashes.
 */
FOUNDATION_EXPORT GengineHashes* _Nullable GengineNewHashes(long size);

/**
 * NewHashesEmpty creates an empty slice of Hashes values.
 */
FOUNDATION_EXPORT GengineHashes* _Nullable GengineNewHashesEmpty(void);

/**
 * NewHeaderFromJSON parses a header from a JSON data dump.
 */
FOUNDATION_EXPORT GengineHeader* _Nullable GengineNewHeaderFromJSON(NSString* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewHeaderFromRLP parses a header from an RLP data dump.
 */
FOUNDATION_EXPORT GengineHeader* _Nullable GengineNewHeaderFromRLP(NSData* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewKeyStore creates a keystore for the given directory.
 */
FOUNDATION_EXPORT GengineKeyStore* _Nullable GengineNewKeyStore(long scryptN, long scryptP, NSError* _Nullable* _Nullable error);

/**
 * NewNode creates and configures a new Geth node.
 */
FOUNDATION_EXPORT GengineNode* _Nullable GengineNewNode(GengineNodeConfig* _Nullable config, GengineEngineConfig* _Nullable engineconfig, NSError* _Nullable* _Nullable error);

/**
 * NewNodeConfig creates a new node option set, initialized to the default values.
 */
FOUNDATION_EXPORT GengineNodeConfig* _Nullable GengineNewNodeConfig(void);

/**
 * NewReceiptFromJSON parses a transaction receipt from a JSON data dump.
 */
FOUNDATION_EXPORT GengineReceipt* _Nullable GengineNewReceiptFromJSON(NSString* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewReceiptFromRLP parses a transaction receipt from an RLP data dump.
 */
FOUNDATION_EXPORT GengineReceipt* _Nullable GengineNewReceiptFromRLP(NSData* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewTopics creates a slice of uninitialized Topics.
 */
FOUNDATION_EXPORT GengineTopics* _Nullable GengineNewTopics(long size);

/**
 * NewTopicsEmpty creates an empty slice of Topics values.
 */
FOUNDATION_EXPORT GengineTopics* _Nullable GengineNewTopicsEmpty(void);

/**
 * NewTransaction creates a new transaction with the given properties.
 */
FOUNDATION_EXPORT GengineTransaction* _Nullable GengineNewTransaction(int64_t nonce, GengineAddress* _Nullable to, GengineBigInt* _Nullable amount, int64_t gasLimit, GengineBigInt* _Nullable gasPrice, NSData* _Nullable data);

/**
 * NewTransactionFromJSON parses a transaction from a JSON data dump.
 */
FOUNDATION_EXPORT GengineTransaction* _Nullable GengineNewTransactionFromJSON(NSString* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewTransactionFromRLP parses a transaction from an RLP data dump.
 */
FOUNDATION_EXPORT GengineTransaction* _Nullable GengineNewTransactionFromRLP(NSData* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * SetDataDirectory setup a writable directory for keystore
 */
FOUNDATION_EXPORT BOOL GengineSetDataDirectory(NSString* _Nullable datadir, NSError* _Nullable* _Nullable error);

/**
 * SetKeystoreDirectory setup a writable directory for keystore
 */
FOUNDATION_EXPORT BOOL GengineSetKeystoreDirectory(NSString* _Nullable keystoredir, NSError* _Nullable* _Nullable error);

/**
 * SetVModule sets the log verbosity pattern and if prepends log messages with call-site location (file and line number).
See package log for details on the pattern syntax.
 */
FOUNDATION_EXPORT void GengineSetVModule(NSString* _Nullable vmodule);

/**
 * SetVerbosity sets the global verbosity level (between 0 and 6 - see logger/verbosity.go).
 */
FOUNDATION_EXPORT void GengineSetVerbosity(long level);

/**
 * Trace log a message at the trace level with string
 */
FOUNDATION_EXPORT void GengineTrace(NSString* _Nullable msg);

/**
 * Warn log a message at the warn level with string
 */
FOUNDATION_EXPORT void GengineWarn(NSString* _Nullable msg);

@class GengineFilterLogsHandler;

@class GengineJavaCallback;

@class GengineNewHeadHandler;

/**
 * FilterLogsHandler is a client-side subscription callback to invoke on events and
subscription failure.
 */
@interface GengineFilterLogsHandler : NSObject <goSeqRefInterface, GengineFilterLogsHandler> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onError:(NSString* _Nullable)failure;
- (void)onFilterLogs:(GengineLog* _Nullable)log;
@end

@interface GengineJavaCallback : NSObject <goSeqRefInterface, GengineJavaCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onEvent:(NSString* _Nullable)p0;
@end

/**
 * NewHeadHandler is a client-side subscription callback to invoke on events and
subscription failure.
 */
@interface GengineNewHeadHandler : NSObject <goSeqRefInterface, GengineNewHeadHandler> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onError:(NSString* _Nullable)failure;
- (void)onNewHead:(GengineHeader* _Nullable)header;
@end

#endif
