{"version":3,"sources":["assets/scripts/Game/GametableItem.js"],"names":["Log","require","cc","Class","Component","properties","roomfree","Node","roomsmall","roommedium","roomlarge","tableid","Label","blindInfo","chipsInfo","playingnum","init","tableInfo","Type","string","active","DisplayTableId","toString","FullTableId","dgame","utils","formatValue","SmallBlind","Straddle","Ante","BuyinMin","BuyinMax","PlayerNum","MaxNum","update","dt","selectGametable","Trace","JSON","stringify","director","loadScene"],"mappings":"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","sourceRoot":"/","sourcesContent":["var Log = require(\"Log\");\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        roomfree: cc.Node,\n        roomsmall: cc.Node,\n        roommedium: cc.Node,\n        roomlarge: cc.Node,\n        tableid: cc.Label,\n        blindInfo: cc.Label,\n        chipsInfo: cc.Label,\n        playingnum: cc.Label,\n        // ...\n    },\n\n    // use this for initialization\n    // {'Ante':4,'BuyinMax':400,'BuyinMin':100,'CurrentStatu':0,'MaxNum':4,'MinNum':2,'PlayerNum':2,'SmallBlind':4,'Straddle':0,'TableId':1}\n    init: function (tableInfo) {\n        this.tableInfo = tableInfo;\n        switch (tableInfo.Type) {\n        case 0:\n            this.tableid.string = 'Free';\n            break;\n        case 1:\n            this.tableid.string = 'Small';\n            break;\n        case 2:\n            this.tableid.string = 'Medium';\n            break;\n        case 3:\n            this.tableid.string = 'Large';\n            break;\n        }\n        this.roomfree.active = (tableInfo.Type == 0);\n        this.roomsmall.active = (tableInfo.Type == 1);\n        this.roommedium.active = (tableInfo.Type == 2);\n        this.roomlarge.active = (tableInfo.Type == 3);\n        if (tableInfo.DisplayTableId < 10) {\n            this.tableid.string += '00' + tableInfo.DisplayTableId.toString();\n        } else if (tableInfo.DisplayTableId < 100) {\n            this.tableid.string += '0' + tableInfo.DisplayTableId.toString();\n        } else {\n            this.tableid.string += tableInfo.DisplayTableId.toString();\n        }\n        this.tableInfo.FullTableId = this.tableid.string;\n/*        switch (tableInfo.Status) {\n            case 0:\n                this.status.string = 'Ready';\n                break;\n            case 2:\n                this.status.string = 'Playing';\n                break;\n        }*/\n        this.blindInfo.string = cc.dgame.utils.formatValue(tableInfo.SmallBlind) + \"/\" + cc.dgame.utils.formatValue(tableInfo.SmallBlind * 2).toString();\n        if (tableInfo.Straddle !== 0) {\n            this.blindInfo.string += \"/\" + cc.dgame.utils.formatValue(tableInfo.SmallBlind * 4).toString();\n        }\n        if (tableInfo.Ante > 0) {\n            this.blindInfo.string += \"(\" + tableInfo.Ante + \")\";\n        }\n        this.chipsInfo.string = cc.dgame.utils.formatValue(tableInfo.BuyinMin).toString() + \"/\" + cc.dgame.utils.formatValue(tableInfo.BuyinMax).toString();\n        this.playingnum.string = tableInfo.PlayerNum + \"/\" + tableInfo.MaxNum;\n    },\n\n    // called every frame\n    update: function (dt) {\n\n    },\n\n    selectGametable: function() {\n        Log.Trace('selectGametable' + JSON.stringify(this.tableInfo));\n        cc.dgame.tableInfo = this.tableInfo;\n        cc.director.loadScene('GameTable');\n    },\n});\n"]}