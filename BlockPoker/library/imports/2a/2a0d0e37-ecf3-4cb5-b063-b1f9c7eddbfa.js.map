{"version":3,"sources":["assets/scripts/Game/GameReviewGameItem.js"],"names":["Log","require","cc","Class","Component","properties","pokerPrefab","Prefab","background","Node","gameitem","winloss","RichText","cardtype","Label","roomID","gameTime","holecards","communitycards","gameitemTips","init","gameInfo","Trace","JSON","stringify","Index","opacity","GameItemTips","active","hand","Hand","tableid","TableId","string","FullTableId","GameTime","CardType","WinLoss","val","dgame","utils","formatValue","Math","abs","formatRichText","i","cardNode","instantiate","addChild","poker","getComponent","HoleCards","undefined","setCardPoint","setFaceUp","CommunityCards","length","onBtnGameItemClicked","boardRecords","find","review","update","dt"],"mappings":"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","sourceRoot":"/","sourcesContent":["var Log = require(\"Log\");\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        pokerPrefab: cc.Prefab,\n        background: cc.Node,\n        gameitem: cc.Node,\n        winloss: cc.RichText,\n        cardtype: cc.Label,\n        roomID: cc.Label,\n        gameTime: cc.Label,\n        holecards: [cc.Node],\n        communitycards: [cc.Node],\n        gameitemTips: cc.Node,\n        // ...\n    },\n\n    // use this for initialization\n    // {\"TableId\":\"Free003\",\"Hand\":1,\"BlindInfo\":\"100/200\",\"Pot\":3600,\"GameTime\":\"2019-08-27 17:37:45\",\"PlayerInfo\":[{\"Addr\":\"0x0FB5dA2aF89CCB269421E9bB1EfCc1D915F871dF\",\"HoleCards\":[27,41],\"DeskCards\":[19,7,46,5,40],\"CardType\":\"Two pairs\",\"WinLoss\":-1800},{\"Addr\":\"0x8E03bA3326c7c38217A80cfa68A23cEca2e1d556\",\"HoleCards\":[24,33],\"DeskCards\":[19,7,46,5,40],\"CardType\":\"Three of a kind\",\"WinLoss\":1800}],\"HoleCards\":[24,33],\"CommunityCards\":[19,7,46,5,40],\"GameItemTips\":false}\n    init: function (gameInfo) {\n        Log.Trace(\"[GameReviewGameItem:init] \" + JSON.stringify(gameInfo));\n        if (gameInfo.Index % 2 == 0) {\n            this.background.opacity = 0;\n        }\n        if (gameInfo.GameItemTips) {\n            this.gameitem.active = false;\n            this.gameitemTips.active = true;\n        } else {\n            this.gameitem.active = true;\n            this.gameitemTips.active = false;\n            this.hand = gameInfo.Hand;\n            this.tableid = gameInfo.TableId;\n            this.roomID.string = gameInfo.FullTableId;\n            this.gameTime.string = gameInfo.GameTime;\n            if (!!gameInfo.CardType) {\n                this.cardtype.string = gameInfo.CardType;\n            } else {\n                this.cardtype.string = \"\";\n            }\n            if (!!gameInfo.WinLoss) {\n                let val = cc.dgame.utils.formatValue(Math.abs(gameInfo.WinLoss));\n                if (gameInfo.WinLoss > 0) {\n                    this.winloss.string = cc.dgame.utils.formatRichText('+' + val, \"#67D067\", true, false);\n                } else if (gameInfo.WinLoss == 0) {\n                    this.winloss.string = cc.dgame.utils.formatRichText(0, \"#D6D6D6\", true, false);\n                } else {\n                    this.winloss.string = cc.dgame.utils.formatRichText('-' + val, \"#FF6E6E\", true, false);\n                }\n            } else {\n                this.winloss.string = \"\";\n            }\n            for (let i = 0; i < 2; i++) {\n                let cardNode = cc.instantiate(this.pokerPrefab);\n                this.holecards[i].addChild(cardNode);\n                let poker = cardNode.getComponent('Poker');\n                poker.init(0, 0);\n                if (gameInfo.HoleCards[i] != null && gameInfo.HoleCards[i] != undefined) {\n                    poker.setCardPoint(gameInfo.HoleCards[i]);\n                    poker.setFaceUp(true);\n                } else {\n                    poker.setFaceUp(false);\n                }\n            }\n            for (let i = 0; i < gameInfo.CommunityCards.length && i < this.communitycards.length; i++) {\n                if (gameInfo.CommunityCards[i] != null && gameInfo.CommunityCards[i] != undefined) {\n                    let cardNode = cc.instantiate(this.pokerPrefab);\n                    this.communitycards[i].addChild(cardNode);\n                    let poker = cardNode.getComponent('Poker');\n                    poker.init(0, 0);\n                    poker.setCardPoint(gameInfo.CommunityCards[i]);\n                    poker.setFaceUp(true);\n                }\n            }\n        }\n    },\n\n    onBtnGameItemClicked () {\n        var boardRecords = cc.find('BoardRecords').getComponent('BoardRecords');\n        if (this.gameitem.active) {\n            boardRecords.review(this.roomID.string, this.hand, this.tableid);\n        }\n    },\n\n    // called every frame\n    update: function (dt) {\n\n    },\n\n});\n"]}