{"version":3,"sources":["assets/scripts/Game/ResultItem.js"],"names":["Log","require","cc","Class","Component","properties","tableId","Label","endTime","creatorName","blindInfo","chipsInfo","winAmount","avator","Sprite","date","init","tableInfo","Trace","JSON","stringify","clubid","Math","floor","TableId","displayTableId","string","dgame","utils","timestampToHourMin","EndTime","CreatorAddr","substr","assetMgr","find","getComponent","idx","parseInt","isNaN","spriteFrame","heads","formatValue","SmallBlind","toString","Straddle","Ante","BuyinMin","BuyinMax","Win","undefined","initTime","dateObj","Date","timeList","toDateString","split","update","dt","selectSingleResult","resultHall","onBtnClickSingleResult"],"mappings":";;;;;;AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AAEAC,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACRC,IAAAA,OAAO,EAASJ,EAAE,CAACK,KADX;AAERC,IAAAA,OAAO,EAAIN,EAAE,CAACK,KAFN;AAGRE,IAAAA,WAAW,EAAKP,EAAE,CAACK,KAHX;AAIRG,IAAAA,SAAS,EAAOR,EAAE,CAACK,KAJX;AAKRI,IAAAA,SAAS,EAAOT,EAAE,CAACK,KALX;AAMRK,IAAAA,SAAS,EAAOV,EAAE,CAACK,KANX;AAORM,IAAAA,MAAM,EAAUX,EAAE,CAACY,MAPX;AAQRC,IAAAA,IAAI,EAAYb,EAAE,CAACK;AARX,GAHP;AAcL;AACAS,EAAAA,IAAI,EAAE,cAAUC,SAAV,EAAqB;AACvBjB,IAAAA,GAAG,CAACkB,KAAJ,CAAU,8BAA8BC,IAAI,CAACC,SAAL,CAAeH,SAAf,CAAxC;AACA,SAAKA,SAAL,GAAiBA,SAAjB;AACA,QAAII,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWN,SAAS,CAACO,OAAV,GAAoB,UAA/B,CAAb;AACA,QAAIC,cAAc,GAAGR,SAAS,CAACO,OAAV,GAAoBH,MAAM,GAAG,UAAlD;AACA,SAAKf,OAAL,CAAaoB,MAAb,GAAsBL,MAAM,GAAG,GAA/B;;AACA,QAAII,cAAc,GAAG,EAArB,EAAyB;AACrB,WAAKnB,OAAL,CAAaoB,MAAb,IAAuB,OAAOD,cAA9B;AACH,KAFD,MAEO,IAAIA,cAAc,GAAG,GAArB,EAA0B;AAC7B,WAAKnB,OAAL,CAAaoB,MAAb,IAAuB,MAAMD,cAA7B;AACH,KAFM,MAEA;AACH,WAAKnB,OAAL,CAAaoB,MAAb,IAAuBD,cAAvB;AACH;;AACD,SAAKjB,OAAL,CAAakB,MAAb,GAAsBxB,EAAE,CAACyB,KAAH,CAASC,KAAT,CAAeC,kBAAf,CAAkCZ,SAAS,CAACa,OAAV,GAAkB,IAApD,CAAtB;AACA,SAAKrB,WAAL,CAAiBiB,MAAjB,GAA0BT,SAAS,CAACc,WAAV,CAAsBC,MAAtB,CAA6B,CAA7B,EAAgC,CAAhC,CAA1B;AACA,QAAIC,QAAQ,GAAG/B,EAAE,CAACgC,IAAH,CAAQ,UAAR,EAAoBC,YAApB,CAAiC,UAAjC,CAAf;AACA,QAAIC,GAAG,GAAGC,QAAQ,CAACpB,SAAS,CAACc,WAAV,CAAsBC,MAAtB,CAA6B,CAA7B,EAAgC,CAAhC,CAAD,EAAqC,EAArC,CAAlB;;AACA,QAAIM,KAAK,CAACF,GAAD,CAAT,EAAgB;AACZA,MAAAA,GAAG,GAAG,CAAN;AACH;;AACD,SAAKvB,MAAL,CAAY0B,WAAZ,GAA0BN,QAAQ,CAACO,KAAT,CAAeJ,GAAG,GAAG,GAArB,CAA1B;AACA,SAAK1B,SAAL,CAAegB,MAAf,GAAwBxB,EAAE,CAACyB,KAAH,CAASC,KAAT,CAAea,WAAf,CAA2BxB,SAAS,CAACyB,UAArC,IAAmD,GAAnD,GAAyDxC,EAAE,CAACyB,KAAH,CAASC,KAAT,CAAea,WAAf,CAA2BxB,SAAS,CAACyB,UAAV,GAAuB,CAAlD,EAAqDC,QAArD,EAAjF;;AACA,QAAI1B,SAAS,CAAC2B,QAAV,KAAuB,CAA3B,EAA8B;AAC1B,WAAKlC,SAAL,CAAegB,MAAf,IAAyB,MAAMxB,EAAE,CAACyB,KAAH,CAASC,KAAT,CAAea,WAAf,CAA2BxB,SAAS,CAACyB,UAAV,GAAuB,CAAlD,EAAqDC,QAArD,EAA/B;AACH;;AACD,QAAI1B,SAAS,CAAC4B,IAAV,GAAiB,CAArB,EAAwB;AACpB,WAAKnC,SAAL,CAAegB,MAAf,IAAyB,MAAMT,SAAS,CAAC4B,IAAhB,GAAuB,GAAhD;AACH;;AACD,SAAKlC,SAAL,CAAee,MAAf,GAAwBxB,EAAE,CAACyB,KAAH,CAASC,KAAT,CAAea,WAAf,CAA2BxB,SAAS,CAAC6B,QAArC,EAA+CH,QAA/C,KAA4D,GAA5D,GAAkEzC,EAAE,CAACyB,KAAH,CAASC,KAAT,CAAea,WAAf,CAA2BxB,SAAS,CAAC8B,QAArC,EAA+CJ,QAA/C,EAA1F;;AACA,QAAI1B,SAAS,CAAC+B,GAAV,IAAiBC,SAArB,EAAgC;AAC5B,WAAKrC,SAAL,CAAec,MAAf,GAAwBT,SAAS,CAAC+B,GAAlC;AACH,KAFD,MAEO;AACH,WAAKpC,SAAL,CAAec,MAAf,GAAwB,GAAxB;AACH;AACJ,GAjDI;AAmDLwB,EAAAA,QAAQ,EAAE,kBAAUnC,IAAV,EAAgB;AACtB,QAAMoC,OAAO,GAAG,IAAIC,IAAJ,CAASrC,IAAT,CAAhB;AACA,QAAIsC,QAAQ,GAAGF,OAAO,CAACG,YAAR,GAAuBC,KAAvB,CAA6B,GAA7B,CAAf;AACA,SAAKxC,IAAL,CAAUW,MAAV,GAAmB2B,QAAQ,CAAC,CAAD,CAAR,GAAc,GAAd,GAAoBA,QAAQ,CAAC,CAAD,CAA/C;AACH,GAvDI;AAyDL;AACAG,EAAAA,MAAM,EAAE,gBAAUC,EAAV,EAAc,CAErB,CA5DI;AA8DLC,EAAAA,kBAAkB,EAAE,8BAAW;AAC3B1D,IAAAA,GAAG,CAACkB,KAAJ,CAAU,wBAAV;AACA,QAAIyC,UAAU,GAAGzD,EAAE,CAACgC,IAAH,CAAQ,QAAR,EAAkBC,YAAlB,CAA+B,YAA/B,CAAjB;AACAnC,IAAAA,GAAG,CAACkB,KAAJ,CAAU,eAAeyC,UAAzB;AACAA,IAAAA,UAAU,CAACC,sBAAX,CAAkC,KAAK3C,SAAL,CAAeO,OAAjD;AACH;AAnEI,CAAT","sourceRoot":"/","sourcesContent":["var Log = require(\"Log\");\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        tableId:        cc.Label,\r\n        endTime:   cc.Label,\r\n        creatorName:    cc.Label,\r\n        blindInfo:      cc.Label,\r\n        chipsInfo:      cc.Label,\r\n        winAmount:      cc.Label,\r\n        avator:         cc.Sprite,\r\n        date:           cc.Label,\r\n    },\r\n\r\n    // use this for initialization\r\n    init: function (tableInfo) {\r\n        Log.Trace(\"ResulItem init tableInfo:\" + JSON.stringify(tableInfo));\r\n        this.tableInfo = tableInfo;\r\n        let clubid = Math.floor(tableInfo.TableId / 0x10000000);\r\n        let displayTableId = tableInfo.TableId - clubid * 0x10000000;\r\n        this.tableId.string = clubid + \"-\";\r\n        if (displayTableId < 10) {\r\n            this.tableId.string += '00' + displayTableId;\r\n        } else if (displayTableId < 100) {\r\n            this.tableId.string += '0' + displayTableId;\r\n        } else {\r\n            this.tableId.string += displayTableId;\r\n        }\r\n        this.endTime.string = cc.dgame.utils.timestampToHourMin(tableInfo.EndTime*1000);\r\n        this.creatorName.string = tableInfo.CreatorAddr.substr(2, 8);\r\n        let assetMgr = cc.find(\"AssetMgr\").getComponent(\"AssetMgr\");\r\n        var idx = parseInt(tableInfo.CreatorAddr.substr(2, 2), 16);\r\n        if (isNaN(idx)) {\r\n            idx = 0;\r\n        }\r\n        this.avator.spriteFrame = assetMgr.heads[idx % 200];\r\n        this.blindInfo.string = cc.dgame.utils.formatValue(tableInfo.SmallBlind) + \"/\" + cc.dgame.utils.formatValue(tableInfo.SmallBlind * 2).toString();\r\n        if (tableInfo.Straddle !== 0) {\r\n            this.blindInfo.string += \"/\" + cc.dgame.utils.formatValue(tableInfo.SmallBlind * 4).toString();\r\n        }\r\n        if (tableInfo.Ante > 0) {\r\n            this.blindInfo.string += \"(\" + tableInfo.Ante + \")\";\r\n        }\r\n        this.chipsInfo.string = cc.dgame.utils.formatValue(tableInfo.BuyinMin).toString() + \"/\" + cc.dgame.utils.formatValue(tableInfo.BuyinMax).toString();\r\n        if (tableInfo.Win != undefined) {\r\n            this.winAmount.string = tableInfo.Win;\r\n        } else {\r\n            this.winAmount.string = \"0\";\r\n        }\r\n    },\r\n\r\n    initTime: function (date) {\r\n        const dateObj = new Date(date);\r\n        let timeList = dateObj.toDateString().split(\" \");\r\n        this.date.string = timeList[2] + \" \" + timeList[1];\r\n    },\r\n\r\n    // called every frame\r\n    update: function (dt) {\r\n\r\n    },\r\n\r\n    selectSingleResult: function() {\r\n        Log.Trace(\"selectSingleResult1111\");\r\n        var resultHall = cc.find('Result').getComponent('ResultHall');\r\n        Log.Trace(\"resultHall\" + resultHall);\r\n        resultHall.onBtnClickSingleResult(this.tableInfo.TableId);\r\n    },\r\n});\r\n"]}